import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 
users_db = {}

class CasinoBot:
    def __init__(self):
        self.starting_balance = 1000
        self.min_bet = 10
        self.max_bet = 1000

    def get_user_balance(self, user_id):
        if user_id not in users_db:
            users_db[user_id] = {
                'balance': self.starting_balance,
                'games_played': 0,
                'total_won': 0
            }
        return users_db[user_id]

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user = self.get_user_balance(user_id)
        
        welcome_text = (
            f"üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ! üé∞\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç\n"
            f"üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {user['games_played']}\n"
            f"üèÜ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: {user['total_won']} –º–æ–Ω–µ—Ç\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
            f"/slots - –∏–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã\n"
            f"/coinflip - –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É\n"
            f"/dice - –∏–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏\n"
            f"/daily - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"
        )
        
        await update.message.reply_text(welcome_text)

    async def balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user = self.get_user_balance(user_id)
        
        await update.message.reply_text(
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç\n"
            f"üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {user['games_played']}\n"
            f"üèÜ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: {user['total_won']} –º–æ–Ω–µ—Ç"
        )

    async def daily_bonus(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user = self.get_user_balance(user_id)
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
        bonus = random.randint(50, 200)
        user['balance'] += bonus
        
        await update.message.reply_text(
            f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!\n"
            f"üíé –í—ã –ø–æ–ª—É—á–∏–ª–∏: {bonus} –º–æ–Ω–µ—Ç\n"
            f"üí∞ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {user['balance']} –º–æ–Ω–µ—Ç"
        )

    async def slots(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user = self.get_user_balance(user_id)
        
        if len(context.args) == 0:
            await update.message.reply_text(
                f"üé∞ –ò–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã\n\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {self.min_bet} –º–æ–Ω–µ—Ç\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {self.max_bet} –º–æ–Ω–µ—Ç\n\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /slots <—Å—Ç–∞–≤–∫–∞>\n"
                f"–ü—Ä–∏–º–µ—Ä: /slots 100"
            )
            return
        
        try:
            bet = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏")
            return
        
        if bet < self.min_bet:
            await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {self.min_bet} –º–æ–Ω–µ—Ç")
            return
        if bet > self.max_bet:
            await update.message.reply_text(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {self.max_bet} –º–æ–Ω–µ—Ç")
            return
        if bet > user['balance']:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return
        
        # –°–ø–∏–Ω —Å–ª–æ—Ç–æ–≤
        symbols = ['üçí', 'üçã', 'üçä', 'üçá', 'üîî', 'üíé', '7Ô∏è‚É£']
        reel1 = random.choice(symbols)
        reel2 = random.choice(symbols)
        reel3 = random.choice(symbols)
        
        user['balance'] -= bet
        user['games_played'] += 1
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞
        if reel1 == reel2 == reel3:
            if reel1 == 'üíé':
                multiplier = 10
            elif reel1 == '7Ô∏è‚É£':
                multiplier = 5
            else:
                multiplier = 3
            win = bet * multiplier
            result = "üéâ –î–ñ–ï–ö–ü–û–¢! –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞!"
        elif reel1 == reel2 or reel2 == reel3 or reel1 == reel3:
            multiplier = 2
            win = bet * multiplier
            result = "üéä –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞!"
        else:
            win = 0
            result = "üòî –ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!"
        
        user['balance'] += win
        user['total_won'] += win
        
        slots_display = f"üé∞ | {reel1} | {reel2} | {reel3} | üé∞"
        
        await update.message.reply_text(
            f"{slots_display}\n\n"
            f"–°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç\n"
            f"{result}\n"
            f"–í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç"
        )

    async def coinflip(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user = self.get_user_balance(user_id)
        
        if len(context.args) == 0:
            keyboard = [
                [InlineKeyboardButton("–û—Ä–µ–ª", callback_data="coin_heads")],
                [InlineKeyboardButton("–†–µ—à–∫–∞", callback_data="coin_tails")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "ü™ô –ü–æ–¥–±—Ä–æ—Å—å—Ç–µ –º–æ–Ω–µ—Ç–∫—É!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É:",
                reply_markup=reply_markup
            )
            return
        
        try:
            bet = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏")
            return
        
        if bet < self.min_bet:
            await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {self.min_bet} –º–æ–Ω–µ—Ç")
            return
        if bet > user['balance']:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['coin_bet'] = bet
        
        keyboard = [
            [InlineKeyboardButton("–û—Ä–µ–ª", callback_data=f"coin_heads_{bet}")],
            [InlineKeyboardButton("–†–µ—à–∫–∞", callback_data=f"coin_tails_{bet}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"ü™ô –°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É:",
            reply_markup=reply_markup
        )

    async def coinflip_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        user = self.get_user_balance(user_id)
        
        data = query.data
        if data.startswith('coin_heads'):
            player_choice = 'heads'
            bet = int(data.split('_')[-1]) if '_' in data else 50
        else:
            player_choice = 'tails'
            bet = int(data.split('_')[-1]) if '_' in data else 50
        
        if bet > user['balance']:
            await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return
        
        user['balance'] -= bet
        user['games_played'] += 1
        
        # –ë—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã
        coin_result = random.choice(['heads', 'tails'])
        coin_emoji = 'ü¶Ö' if coin_result == 'heads' else 'ü™ô'
        
        if player_choice == coin_result:
            win = bet * 2
            result_text = "üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
        else:
            win = 0
            result_text = "üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
        
        user['balance'] += win
        user['total_won'] += win
        
        await query.edit_message_text(
            f"{coin_emoji} –ú–æ–Ω–µ—Ç–∞ —É–ø–∞–ª–∞: {'–û—Ä–µ–ª' if coin_result == 'heads' else '–†–µ—à–∫–∞'}\n\n"
            f"–í–∞—à –≤—ã–±–æ—Ä: {'–û—Ä–µ–ª' if player_choice == 'heads' else '–†–µ—à–∫–∞'}\n"
            f"–°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç\n"
            f"{result_text}\n"
            f"–í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç"
        )

    async def dice_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user = self.get_user_balance(user_id)
        
        if len(context.args) == 0:
            await update.message.reply_text(
                "üé≤ –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏\n\n"
                "–ë—Ä–æ—Å—å—Ç–µ –¥–≤–∞ –∫—É–±–∏–∫–∞. –ï—Å–ª–∏ —Å—É–º–º–∞ –±–æ–ª—å—à–µ 7 - –≤—ã –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ!\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {self.min_bet} –º–æ–Ω–µ—Ç\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /dice <—Å—Ç–∞–≤–∫–∞>\n"
                "–ü—Ä–∏–º–µ—Ä: /dice 100"
            )
            return
        
        try:
            bet = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏")
            return
        
        if bet < self.min_bet:
            await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {self.min_bet} –º–æ–Ω–µ—Ç")
            return
        if bet > user['balance']:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return
        
        user['balance'] -= bet
        user['games_played'] += 1
        
        # –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π
        dice1 = random.randint(1, 6)
        dice2 = random.randint(1, 6)
        total = dice1 + dice2
        
        if total > 7:
            win = bet * 2
            result_text = "üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –°—É–º–º–∞ –±–æ–ª—å—à–µ 7!"
        else:
            win = 0
            result_text = "üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –°—É–º–º–∞ 7 –∏–ª–∏ –º–µ–Ω—å—à–µ."
        
        user['balance'] += win
        user['total_won'] += win
        
        await update.message.reply_text(
            f"üé≤ –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π:\n"
            f"–ö—É–±–∏–∫ 1: {dice1}\n"
            f"–ö—É–±–∏–∫ 2: {dice2}\n"
            f"–°—É–º–º–∞: {total}\n\n"
            f"–°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç\n"
            f"{result_text}\n"
            f"–í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç"
        )

def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    TOKEN = "7896535192:AAHBE1HTUJtVHEEop7BHcDcp1odzj3EFowE"
    
    casino_bot = CasinoBot()
    
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", casino_bot.start))
    application.add_handler(CommandHandler("balance", casino_bot.balance))
    application.add_handler(CommandHandler("daily", casino_bot.daily_bonus))
    application.add_handler(CommandHandler("slots", casino_bot.slots))
    application.add_handler(CommandHandler("coinflip", casino_bot.coinflip))
    application.add_handler(CommandHandler("dice", casino_bot.dice_game))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    application.add_handler(CallbackQueryHandler(casino_bot.coinflip_callback, pattern="^coin_"))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()